import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Edit, useForm, useSelect } from "@refinedev/antd";
import { Form, Input, Select, DatePicker, Row, Col, Card, Space, Typography, InputNumber, Checkbox, Alert, Tag, Statistic, Progress, } from "antd";
import { RocketOutlined, UserOutlined, PercentageOutlined, CalendarOutlined, FileTextOutlined, DollarOutlined, PhoneOutlined, } from "@ant-design/icons";
import dayjs from "dayjs";
const { TextArea } = Input;
const { RangePicker } = DatePicker;
const { Title, Text } = Typography;
export const CampaignEdit = () => {
    const { formProps, saveButtonProps, queryResult } = useForm();
    const campaignData = queryResult?.data?.data;
    const { selectProps: employeeSelectProps } = useSelect({
        resource: "employees",
        optionLabel: (item) => `${item.firstName} ${item.lastName}`,
        optionValue: "id",
        filters: [
            {
                field: "role",
                operator: "in",
                value: ["agent", "manager"],
            },
        ],
    });
    const calculateConversionRate = () => {
        if (!campaignData || campaignData.metrics.contacted === 0)
            return 0;
        return ((campaignData.metrics.converted / campaignData.metrics.contacted) * 100).toFixed(1);
    };
    return (_jsx(Edit, { saveButtonProps: saveButtonProps, children: _jsx(Form, { ...formProps, layout: "vertical", children: _jsxs(Row, { gutter: [16, 16], children: [campaignData && (_jsx(Col, { span: 24, children: _jsxs(Card, { title: "M\u00E9tricas Actuales", bordered: false, children: [_jsxs(Row, { gutter: 16, children: [_jsx(Col, { xs: 6, children: _jsx(Statistic, { title: "Llamadas Totales", value: campaignData.metrics.totalCalls, prefix: _jsx(PhoneOutlined, {}) }) }), _jsx(Col, { xs: 6, children: _jsx(Statistic, { title: "Contactados", value: campaignData.metrics.contacted, prefix: _jsx(UserOutlined, {}) }) }), _jsx(Col, { xs: 6, children: _jsx(Statistic, { title: "Conversiones", value: campaignData.metrics.converted, prefix: _jsx(UserOutlined, {}) }) }), _jsx(Col, { xs: 6, children: _jsx(Statistic, { title: "Ingresos", value: campaignData.metrics.revenue, prefix: "$", precision: 2 }) })] }), _jsxs("div", { style: { marginTop: 16 }, children: [_jsx(Text, { children: "Tasa de Conversi\u00F3n" }), _jsx(Progress, { percent: Number(calculateConversionRate()) })] })] }) })), _jsx(Col, { span: 24, children: _jsxs(Card, { title: "Informaci\u00F3n B\u00E1sica", bordered: false, children: [_jsxs(Row, { gutter: 16, children: [_jsx(Col, { xs: 24, lg: 12, children: _jsx(Form.Item, { label: "Nombre de la Campa\u00F1a", name: "name", rules: [{ required: true, message: "Este campo es requerido" }], children: _jsx(Input, { prefix: _jsx(RocketOutlined, {}), placeholder: "Ej: Renovaci\u00F3n Elite Q2 2024" }) }) }), _jsx(Col, { xs: 24, lg: 6, children: _jsx(Form.Item, { label: "Tipo de Campa\u00F1a", name: "type", rules: [{ required: true, message: "Selecciona un tipo" }], children: _jsxs(Select, { placeholder: "Seleccionar tipo", children: [_jsx(Select.Option, { value: "retention", children: _jsx(Tag, { color: "blue", children: "Retenci\u00F3n" }) }), _jsx(Select.Option, { value: "winback", children: _jsx(Tag, { color: "purple", children: "Recuperaci\u00F3n" }) }), _jsx(Select.Option, { value: "upgrade", children: _jsx(Tag, { color: "gold", children: "Mejora" }) }), _jsx(Select.Option, { value: "seasonal", children: _jsx(Tag, { color: "green", children: "Temporal" }) })] }) }) }), _jsx(Col, { xs: 24, lg: 6, children: _jsx(Form.Item, { label: "Estado", name: "status", children: _jsxs(Select, { children: [_jsx(Select.Option, { value: "draft", children: "Borrador" }), _jsx(Select.Option, { value: "active", children: "Activa" }), _jsx(Select.Option, { value: "paused", children: "Pausada" }), _jsx(Select.Option, { value: "completed", children: "Completada" })] }) }) })] }), _jsxs(Row, { gutter: 16, children: [_jsx(Col, { span: 12, children: _jsx(Form.Item, { label: "Fecha de Inicio", name: "startDate", rules: [{ required: true, message: "Requerido" }], getValueProps: (value) => ({
                                                    value: value ? dayjs(value) : undefined,
                                                }), children: _jsx(DatePicker, { style: { width: "100%" }, format: "DD/MM/YYYY" }) }) }), _jsx(Col, { span: 12, children: _jsx(Form.Item, { label: "Fecha de Fin", name: "endDate", rules: [{ required: true, message: "Requerido" }], getValueProps: (value) => ({
                                                    value: value ? dayjs(value) : undefined,
                                                }), children: _jsx(DatePicker, { style: { width: "100%" }, format: "DD/MM/YYYY" }) }) })] })] }) }), _jsx(Col, { xs: 24, lg: 12, children: _jsxs(Card, { title: "Segmentaci\u00F3n de Clientes", bordered: false, children: [_jsx(Form.Item, { label: "Niveles de Cliente", name: ["targeting", "customerTiers"], rules: [{ required: true, message: "Selecciona al menos un nivel" }], children: _jsx(Checkbox.Group, { children: _jsxs(Space, { direction: "vertical", children: [_jsxs(Checkbox, { value: "gold", children: [_jsx(Tag, { color: "gold", children: "Oro" }), " - Clientes VIP"] }), _jsxs(Checkbox, { value: "silver", children: [_jsx(Tag, { color: "silver", children: "Plata" }), " - Clientes regulares"] }), _jsxs(Checkbox, { value: "bronze", children: [_jsx(Tag, { color: "bronze", children: "Bronce" }), " - Clientes nuevos"] })] }) }) }), _jsx(Form.Item, { label: "Rango de \u00DAltima Compra (d\u00EDas)", children: _jsxs(Row, { gutter: 16, children: [_jsx(Col, { span: 12, children: _jsx(Form.Item, { name: ["targeting", "lastPurchaseRange", "min"], rules: [{ required: true, message: "Requerido" }], children: _jsx(InputNumber, { min: 0, style: { width: "100%" }, placeholder: "M\u00EDnimo" }) }) }), _jsx(Col, { span: 12, children: _jsx(Form.Item, { name: ["targeting", "lastPurchaseRange", "max"], rules: [{ required: true, message: "Requerido" }], children: _jsx(InputNumber, { min: 0, style: { width: "100%" }, placeholder: "M\u00E1ximo" }) }) })] }) }), _jsx(Form.Item, { label: "\u00BFRequiere suscripci\u00F3n activa?", name: ["targeting", "hasSubscription"], valuePropName: "checked", children: _jsx(Checkbox, { children: "S\u00ED, solo clientes con suscripci\u00F3n" }) }), _jsx(Form.Item, { label: "Tipos de Producto (opcional)", name: ["targeting", "productTypes"], children: _jsxs(Select, { mode: "multiple", placeholder: "Todos los productos", children: [_jsx(Select.Option, { value: "mattress", children: "Colchones" }), _jsx(Select.Option, { value: "pillow", children: "Almohadas" }), _jsx(Select.Option, { value: "protector", children: "Protectores" }), _jsx(Select.Option, { value: "frame", children: "Bases" })] }) })] }) }), _jsx(Col, { xs: 24, lg: 12, children: _jsxs(Card, { title: "Oferta", bordered: false, children: [_jsx(Form.Item, { label: "Tipo de Oferta", name: ["offer", "type"], rules: [{ required: true, message: "Selecciona un tipo de oferta" }], children: _jsxs(Select, { placeholder: "Seleccionar tipo", children: [_jsxs(Select.Option, { value: "percentage", children: [_jsx(PercentageOutlined, {}), " Porcentaje de descuento"] }), _jsxs(Select.Option, { value: "fixed", children: [_jsx(DollarOutlined, {}), " Monto fijo"] }), _jsxs(Select.Option, { value: "freeMonth", children: [_jsx(CalendarOutlined, {}), " Mes gratis"] }), _jsxs(Select.Option, { value: "upgrade", children: [_jsx(RocketOutlined, {}), " Mejora de plan"] })] }) }), _jsx(Form.Item, { noStyle: true, shouldUpdate: (prevValues, currentValues) => prevValues?.offer?.type !== currentValues?.offer?.type, children: ({ getFieldValue }) => {
                                        const offerType = getFieldValue(["offer", "type"]);
                                        if (offerType === "percentage" || offerType === "fixed") {
                                            return (_jsx(Form.Item, { label: offerType === "percentage" ? "Porcentaje" : "Monto", name: ["offer", "value"], rules: [{ required: true, message: "Este campo es requerido" }], children: _jsx(InputNumber, { min: 0, max: offerType === "percentage" ? 100 : undefined, style: { width: "100%" }, prefix: offerType === "percentage" ? "" : "$", suffix: offerType === "percentage" ? "%" : "" }) }));
                                        }
                                        return null;
                                    } }), _jsx(Form.Item, { label: "V\u00E1lida hasta", name: ["offer", "validUntil"], rules: [{ required: true, message: "Selecciona fecha de expiraciÃ³n" }], getValueProps: (value) => ({
                                        value: value ? dayjs(value) : undefined,
                                    }), children: _jsx(DatePicker, { style: { width: "100%" }, format: "DD/MM/YYYY" }) })] }) }), _jsx(Col, { span: 24, children: _jsxs(Card, { title: "Script de Llamada", bordered: false, children: [_jsx(Form.Item, { label: "Apertura", name: ["script", "opening"], rules: [{ required: true, message: "Este campo es requerido" }], children: _jsx(TextArea, { rows: 3, placeholder: "Ej: Hola [CUSTOMER_NAME], soy [AGENT_NAME] de LA Mattress Store..." }) }), _jsx(Form.Item, { label: "Propuestas de Valor", name: ["script", "valueProps"], rules: [{ required: true, message: "Agrega al menos una propuesta" }], children: _jsx(Select, { mode: "tags", style: { width: "100%" }, placeholder: "Escribe y presiona Enter para agregar", tokenSeparators: [","] }) }), _jsx(Form.Item, { label: "Cierre", name: ["script", "closing"], rules: [{ required: true, message: "Este campo es requerido" }], children: _jsx(TextArea, { rows: 2, placeholder: "Ej: \u00BFLe gustar\u00EDa asegurar estos beneficios por otro a\u00F1o?" }) }), _jsx(Alert, { message: "Variables disponibles", description: "Puedes usar: [CUSTOMER_NAME], [AGENT_NAME], [LAST_PRODUCT], [TIME_AGO]", type: "info", showIcon: true, icon: _jsx(FileTextOutlined, {}) })] }) }), _jsx(Col, { span: 24, children: _jsx(Card, { title: "Asignaci\u00F3n", bordered: false, children: _jsx(Form.Item, { label: "Agentes Asignados", name: "assignedTo", rules: [{ required: true, message: "Selecciona al menos un agente" }], children: _jsx(Select, { ...employeeSelectProps, mode: "multiple", placeholder: "Seleccionar agentes...", showSearch: true, filterOption: (input, option) => (option?.label ?? "")
                                        .toLowerCase()
                                        .includes(input.toLowerCase()) }) }) }) })] }) }) }));
};
