import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Edit, useForm } from "@refinedev/antd";
import { Form, Input, Select, Switch, Card, Button, Alert, Space, Tag } from "antd";
import { ShopOutlined } from "@ant-design/icons";
import { useShow } from "@refinedev/core";
export const ShopifyCustomerEdit = () => {
    const { formProps, saveButtonProps } = useForm();
    const { queryResult } = useShow();
    const record = queryResult?.data?.data;
    return (_jsxs(Edit, { saveButtonProps: saveButtonProps, title: `Editar: ${record?.firstName} ${record?.lastName}`, headerProps: {
            extra: (_jsx(Button, { icon: _jsx(ShopOutlined, {}), onClick: () => window.open(`https://tu-tienda.myshopify.com/admin/customers/${record?.shopifyId}`, "_blank"), children: "Editar en Shopify" })),
        }, children: [_jsx(Alert, { message: "Edici\u00F3n limitada", description: "Solo se pueden editar campos locales y etiquetas. Para una edici\u00F3n completa, use el panel de administraci\u00F3n de Shopify.", type: "warning", showIcon: true, style: { marginBottom: 24 } }), _jsxs(Form, { ...formProps, layout: "vertical", children: [_jsxs(Card, { title: "Informaci\u00F3n Local", style: { marginBottom: 24 }, children: [_jsx(Form.Item, { label: "Notas Internas", name: "internalNotes", help: "Estas notas son solo para uso interno y no se sincronizan con Shopify", children: _jsx(Input.TextArea, { rows: 4, placeholder: "Agregar notas sobre este cliente..." }) }), _jsx(Form.Item, { label: "Etiquetas Locales", name: "localTags", help: "Etiquetas adicionales para uso interno", children: _jsxs(Select, { mode: "tags", placeholder: "Agregar etiquetas...", style: { width: '100%' }, children: [_jsx(Select.Option, { value: "vip", children: "VIP" }), _jsx(Select.Option, { value: "problematico", children: "Problem\u00E1tico" }), _jsx(Select.Option, { value: "mayorista", children: "Mayorista" }), _jsx(Select.Option, { value: "frecuente", children: "Comprador Frecuente" })] }) }), _jsx(Form.Item, { label: "Prioridad de Atenci\u00F3n", name: "priority", children: _jsxs(Select, { children: [_jsx(Select.Option, { value: "low", children: "Baja" }), _jsx(Select.Option, { value: "normal", children: "Normal" }), _jsx(Select.Option, { value: "high", children: "Alta" }), _jsx(Select.Option, { value: "urgent", children: "Urgente" })] }) })] }), _jsxs(Card, { title: "Sincronizaci\u00F3n", style: { marginBottom: 24 }, children: [_jsx(Form.Item, { label: "Sincronizar Autom\u00E1ticamente", name: "autoSync", valuePropName: "checked", children: _jsx(Switch, {}) }), _jsx(Form.Item, { label: "Fusionar con Cliente Local", name: "localCustomerId", help: "Vincular este cliente de Shopify con un cliente existente en el sistema local", children: _jsx(Select, { showSearch: true, placeholder: "Buscar cliente local...", optionFilterProp: "children", allowClear: true }) })] }), record && (_jsx(Card, { title: "Informaci\u00F3n de Shopify (Solo lectura)", children: _jsxs(Space, { direction: "vertical", style: { width: "100%" }, children: [_jsxs("div", { children: [_jsx("strong", { children: "Email:" }), " ", record.email, record.verifiedEmail && _jsx(Tag, { color: "green", style: { marginLeft: 8 }, children: "Verificado" })] }), _jsxs("div", { children: [_jsx("strong", { children: "Tel\u00E9fono:" }), " ", record.phone || "No registrado"] }), _jsxs("div", { children: [_jsx("strong", { children: "Total Gastado:" }), " ", record.currency, " ", record.totalSpent] }), _jsxs("div", { children: [_jsx("strong", { children: "N\u00FAmero de \u00D3rdenes:" }), " ", record.ordersCount] }), _jsxs("div", { children: [_jsx("strong", { children: "Estado:" }), _jsx(Tag, { color: record.state === "enabled" ? "green" :
                                                record.state === "disabled" ? "red" :
                                                    record.state === "invited" ? "blue" : "orange", style: { marginLeft: 8 }, children: record.state === "enabled" ? "Activo" :
                                                record.state === "disabled" ? "Desactivado" :
                                                    record.state === "invited" ? "Invitado" : "Rechazado" })] })] }) }))] })] }));
};
