import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Edit, useForm } from "@refinedev/antd";
import { Form, Input, Select, Switch, Card, Button, Alert, Space, InputNumber } from "antd";
import { ShopOutlined, TagOutlined } from "@ant-design/icons";
import { useShow } from "@refinedev/core";
import dayjs from "dayjs";
export const ShopifyCouponEdit = () => {
    const { formProps, saveButtonProps } = useForm();
    const { queryResult } = useShow();
    const record = queryResult?.data?.data;
    return (_jsxs(Edit, { saveButtonProps: saveButtonProps, title: `Editar: ${record?.title || ""}`, headerProps: {
            extra: (_jsx(Button, { icon: _jsx(ShopOutlined, {}), onClick: () => window.open(`https://tu-tienda.myshopify.com/admin/discounts/${record?.shopifyId}`, "_blank"), children: "Editar en Shopify" })),
        }, children: [_jsx(Alert, { message: "Edici\u00F3n limitada", description: "Solo se pueden editar campos de seguimiento local. Para modificar el cup\u00F3n (valor, c\u00F3digo, etc.), use el panel de administraci\u00F3n de Shopify.", type: "warning", showIcon: true, style: { marginBottom: 24 } }), _jsxs(Form, { ...formProps, layout: "vertical", children: [_jsxs(Card, { title: "Seguimiento Local", style: { marginBottom: 24 }, children: [_jsx(Form.Item, { label: "Nombre para Reportes", name: "reportName", help: "Nombre interno para identificar el cup\u00F3n en reportes", children: _jsx(Input, { placeholder: "Ej: Descuento Verano 2024" }) }), _jsx(Form.Item, { label: "Categor\u00EDa de Campa\u00F1a", name: "campaignCategory", children: _jsxs(Select, { placeholder: "Seleccione una categor\u00EDa", children: [_jsx(Select.Option, { value: "seasonal", children: "Temporada" }), _jsx(Select.Option, { value: "clearance", children: "Liquidaci\u00F3n" }), _jsx(Select.Option, { value: "loyalty", children: "Fidelizaci\u00F3n" }), _jsx(Select.Option, { value: "acquisition", children: "Adquisici\u00F3n" }), _jsx(Select.Option, { value: "retention", children: "Retenci\u00F3n" })] }) }), _jsx(Form.Item, { label: "Notas Internas", name: "internalNotes", children: _jsx(Input.TextArea, { rows: 4, placeholder: "Notas sobre el rendimiento del cup\u00F3n, observaciones, etc." }) }), _jsx(Form.Item, { label: "Objetivo de Uso", name: "usageTarget", help: "Meta de usos para este cup\u00F3n", children: _jsx(InputNumber, { min: 0, style: { width: "100%" }, placeholder: "Ej: 100" }) })] }), _jsxs(Card, { title: "Alertas y Notificaciones", style: { marginBottom: 24 }, children: [_jsx(Form.Item, { label: "Notificar cuando queden pocos usos", name: "lowUsageAlert", valuePropName: "checked", children: _jsx(Switch, {}) }), _jsx(Form.Item, { label: "Umbral de alerta (%)", name: "alertThreshold", help: "Notificar cuando el uso alcance este porcentaje del l\u00EDmite", children: _jsx(InputNumber, { min: 0, max: 100, formatter: value => `${value}%`, parser: (value) => parseFloat(value?.replace(/[%$,]/g, "") || "0"), style: { width: "100%" } }) }), _jsx(Form.Item, { label: "Notificar antes de expirar", name: "expirationAlert", valuePropName: "checked", children: _jsx(Switch, {}) }), _jsx(Form.Item, { label: "D\u00EDas antes de expiraci\u00F3n", name: "expirationAlertDays", children: _jsx(InputNumber, { min: 1, max: 30, style: { width: "100%" } }) })] }), record && (_jsx(Card, { title: "Informaci\u00F3n de Shopify (Solo lectura)", children: _jsxs(Space, { direction: "vertical", style: { width: "100%" }, children: [_jsxs("div", { children: [_jsx("strong", { children: "C\u00F3digo:" }), _jsx(TagOutlined, { style: { marginLeft: 8, marginRight: 4 } }), record.code] }), _jsxs("div", { children: [_jsx("strong", { children: "Tipo de Descuento:" }), " ", record.discountType === "percentage" ? `${record.value}% de descuento` :
                                            record.discountType === "fixed_amount" ? `$${record.value} de descuento` :
                                                "Env√≠o gratuito"] }), _jsxs("div", { children: [_jsx("strong", { children: "Usos:" }), " ", record.usageCount, " ", record.usageLimit && `de ${record.usageLimit}`] }), _jsxs("div", { children: [_jsx("strong", { children: "Vigencia:" }), record.startsAt && ` Desde ${dayjs(record.startsAt).format("DD/MM/YYYY")}`, record.endsAt && ` hasta ${dayjs(record.endsAt).format("DD/MM/YYYY")}`, !record.endsAt && " (Sin fecha de fin)"] }), _jsxs("div", { children: [_jsx("strong", { children: "Estado:" }), _jsx("span", { style: {
                                                marginLeft: 8,
                                                color: record.status === "active" ? "#52c41a" :
                                                    record.status === "expired" ? "#f5222d" : "#8c8c8c"
                                            }, children: record.status === "active" ? "Activo" :
                                                record.status === "expired" ? "Expirado" : "Desactivado" })] })] }) }))] })] }));
};
