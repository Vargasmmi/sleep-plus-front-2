import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import { Table, Button, Tag, Space, Card, Typography, notification } from 'antd';
import { LinkOutlined, CopyOutlined } from '@ant-design/icons';
import stripeService from '../../services/stripeService';
const { Title } = Typography;
const PaymentLinksList = () => {
    const [paymentLinks, setPaymentLinks] = useState([]);
    const [loading, setLoading] = useState(false);
    useEffect(() => {
        loadPaymentLinks();
    }, []);
    const loadPaymentLinks = async () => {
        setLoading(true);
        try {
            const response = await stripeService.getPaymentLinks();
            if (response.success) {
                setPaymentLinks(response.paymentLinks);
            }
        }
        catch (error) {
            notification.error({
                message: 'Error al cargar Payment Links',
                description: error.message
            });
        }
        finally {
            setLoading(false);
        }
    };
    const copyToClipboard = async (text) => {
        try {
            await navigator.clipboard.writeText(text);
            notification.success({ message: 'Enlace copiado al portapapeles' });
        }
        catch (err) {
            notification.error({ message: 'Error al copiar el enlace' });
        }
    };
    const columns = [
        {
            title: 'Producto',
            dataIndex: 'productName',
            key: 'productName',
        },
        {
            title: 'Cliente',
            dataIndex: 'customerEmail',
            key: 'customerEmail',
        },
        {
            title: 'Precio',
            dataIndex: 'amount',
            key: 'amount',
            render: (amount, record) => stripeService.formatCurrency(amount, record.currency),
        },
        {
            title: 'Estado',
            dataIndex: 'status',
            key: 'status',
            render: (status) => (_jsx(Tag, { color: stripeService.getStatusColor(status), children: stripeService.getStatusText(status) })),
        },
        {
            title: 'Fecha',
            dataIndex: 'createdAt',
            key: 'createdAt',
            render: (date) => stripeService.formatDate(date),
        },
        {
            title: 'Acciones',
            key: 'actions',
            render: (_, record) => (_jsxs(Space, { children: [_jsx(Button, { icon: _jsx(CopyOutlined, {}), onClick: () => copyToClipboard(record.url), title: "Copiar enlace" }), _jsx(Button, { icon: _jsx(LinkOutlined, {}), onClick: () => window.open(record.url, '_blank'), title: "Abrir enlace" })] })),
        },
    ];
    return (_jsxs(Card, { children: [_jsx(Title, { level: 3, children: "Payment Links" }), _jsx(Table, { columns: columns, dataSource: paymentLinks, loading: loading, rowKey: "id", pagination: { pageSize: 10 } })] }));
};
export default PaymentLinksList;
