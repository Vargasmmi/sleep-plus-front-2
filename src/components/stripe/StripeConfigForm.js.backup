import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import { Form, Input, Button, Card, Switch, Space, Alert, Typography, Row, Col, Divider } from 'antd';
import { useNotification } from '@refinedev/core';
import { SaveOutlined, CheckCircleOutlined, WarningOutlined } from '@ant-design/icons';
import stripeService from '../../services/stripeService';
const { Title, Text, Paragraph } = Typography;
const StripeConfigForm = ({ onConfigSaved }) => {
    const { open } = useNotification();
    const [form] = Form.useForm();
    const [loading, setLoading] = useState(false);
    const [testing, setTesting] = useState(false);
    const [configured, setConfigured] = useState(false);
    const [currentConfig, setCurrentConfig] = useState(null);
    useEffect(() => {
        loadCurrentConfig();
    }, []);
    const loadCurrentConfig = async () => {
        try {
            const response = await stripeService.getConfig();
            if (response.success && response.configured && response.config) {
                setCurrentConfig(response.config);
                setConfigured(true);
                form.setFieldsValue({
                    publicKey: response.config.publicKey,
                    secretKey: '',
                    webhookSecret: '',
                    testMode: response.config.testMode,
                    currency: response.config.currency,
                    paymentLinks: response.config.enabledFeatures.paymentLinks,
                    subscriptions: response.config.enabledFeatures.subscriptions,
                    oneTimePayments: response.config.enabledFeatures.oneTimePayments,
                    webhooks: response.config.enabledFeatures.webhooks,
                });
            }
        }
        catch (error) {
            console.error('Error cargando configuración:', error);
        }
    };
    const handleSubmit = async (values) => {
        setLoading(true);
        try {
            const configData = {
                publicKey: values.publicKey,
                secretKey: values.secretKey,
                webhookSecret: values.webhookSecret || '',
                testMode: values.testMode || true,
                currency: values.currency || 'USD',
                enabledFeatures: {
                    paymentLinks: values.paymentLinks || true,
                    subscriptions: values.subscriptions || true,
                    oneTimePayments: values.oneTimePayments || true,
                    webhooks: values.webhooks || true,
                }
            };
            const response = await stripeService.saveConfig(configData);
            if (response.success) {
                open?.({
                    type: 'success',
                    message: '¡Configuración guardada!',
                    description: response.message,
                });
                setConfigured(true);
                await loadCurrentConfig();
                if (onConfigSaved && currentConfig) {
                    onConfigSaved(currentConfig);
                }
            }
        }
        catch (error) {
            open?.({
                type: 'error',
                message: 'Error al guardar configuración',
                description: error.message,
            });
        }
        finally {
            setLoading(false);
        }
    };
    const testConnection = async () => {
        const publicKey = form.getFieldValue('publicKey');
        const secretKey = form.getFieldValue('secretKey');
        if (!publicKey || !secretKey) {
            open?.({
                type: 'warning',
                message: 'Campos requeridos',
                description: 'Por favor ingresa las claves de Stripe antes de probar la conexión',
            });
            return;
        }
        setTesting(true);
        try {
            const response = await stripeService.saveConfig({
                publicKey,
                secretKey,
                testMode: true
            });
            if (response.success) {
                open?.({
                    type: 'success',
                    message: '¡Conexión exitosa!',
                    description: 'La conexión con Stripe ha sido establecida correctamente',
                });
            }
        }
        catch (error) {
            open?.({
                type: 'error',
                message: 'Error de conexión',
                description: error.message,
            });
        }
        finally {
            setTesting(false);
        }
    };
    return (_jsx(Card, { children: _jsxs(Space, { direction: "vertical", size: "large", style: { width: '100%' }, children: [_jsxs("div", { children: [_jsx(Title, { level: 3, children: _jsxs(Space, { children: ["Configuraci\u00F3n de Stripe", configured && _jsx(CheckCircleOutlined, { style: { color: '#52c41a' } })] }) }), _jsx(Paragraph, { type: "secondary", children: "Configura las credenciales de Stripe para habilitar los pagos y suscripciones." })] }), configured && currentConfig && (_jsx(Alert, { message: "Stripe configurado correctamente", description: `Modo: ${currentConfig.testMode ? 'Prueba' : 'Producción'} | Moneda: ${currentConfig.currency}`, type: "success", showIcon: true })), _jsxs(Form, { form: form, layout: "vertical", onFinish: handleSubmit, initialValues: {
                        testMode: true,
                        currency: 'USD',
                        paymentLinks: true,
                        subscriptions: true,
                        oneTimePayments: true,
                        webhooks: true,
                    }, children: [_jsxs(Row, { gutter: 24, children: [_jsx(Col, { xs: 24, lg: 12, children: _jsx(Form.Item, { label: "Stripe Public Key", name: "publicKey", rules: [
                                            { required: true, message: 'El Public Key es requerido' },
                                            { pattern: /^pk_(test_|live_)/, message: 'Debe comenzar con pk_test_ o pk_live_' }
                                        ], children: _jsx(Input.Password, { placeholder: "pk_test_51...", visibilityToggle: true }) }) }), _jsx(Col, { xs: 24, lg: 12, children: _jsx(Form.Item, { label: "Stripe Secret Key", name: "secretKey", rules: [
                                            { required: true, message: 'El Secret Key es requerido' },
                                            { pattern: /^sk_(test_|live_)/, message: 'Debe comenzar con sk_test_ o sk_live_' }
                                        ], children: _jsx(Input.Password, { placeholder: "sk_test_51...", visibilityToggle: true }) }) })] }), _jsxs(Row, { gutter: 24, children: [_jsx(Col, { xs: 24, lg: 12, children: _jsx(Form.Item, { label: "Webhook Secret (Opcional)", name: "webhookSecret", help: "Secret para verificar webhooks de Stripe", children: _jsx(Input.Password, { placeholder: "whsec_...", visibilityToggle: true }) }) }), _jsx(Col, { xs: 24, lg: 12, children: _jsx(Form.Item, { label: "Moneda", name: "currency", children: _jsx(Input, { placeholder: "USD" }) }) })] }), _jsx(Row, { gutter: 24, children: _jsx(Col, { xs: 24, lg: 12, children: _jsx(Form.Item, { label: "Modo de Prueba", name: "testMode", valuePropName: "checked", children: _jsx(Switch, { checkedChildren: "Prueba", unCheckedChildren: "Producci\u00F3n", defaultChecked: true }) }) }) }), _jsx(Divider, { orientation: "left", children: "Funcionalidades Habilitadas" }), _jsxs(Row, { gutter: 24, children: [_jsx(Col, { xs: 24, lg: 6, children: _jsx(Form.Item, { label: "Payment Links", name: "paymentLinks", valuePropName: "checked", children: _jsx(Switch, { defaultChecked: true }) }) }), _jsx(Col, { xs: 24, lg: 6, children: _jsx(Form.Item, { label: "Suscripciones", name: "subscriptions", valuePropName: "checked", children: _jsx(Switch, { defaultChecked: true }) }) }), _jsx(Col, { xs: 24, lg: 6, children: _jsx(Form.Item, { label: "Pagos \u00DAnicos", name: "oneTimePayments", valuePropName: "checked", children: _jsx(Switch, { defaultChecked: true }) }) }), _jsx(Col, { xs: 24, lg: 6, children: _jsx(Form.Item, { label: "Webhooks", name: "webhooks", valuePropName: "checked", children: _jsx(Switch, { defaultChecked: true }) }) })] }), _jsx(Divider, {}), _jsxs(Space, { children: [_jsx(Button, { type: "primary", htmlType: "submit", icon: _jsx(SaveOutlined, {}), loading: loading, size: "large", children: "Guardar Configuraci\u00F3n" }), _jsx(Button, { onClick: testConnection, loading: testing, size: "large", children: "Probar Conexi\u00F3n" })] })] }), !configured && (_jsx(Alert, { message: "\u00A1Importante!", description: _jsxs("div", { children: [_jsx("p", { children: "Para configurar Stripe necesitar\u00E1s:" }), _jsxs("ul", { children: [_jsx("li", { children: "Una cuenta de Stripe (gratuita en stripe.com)" }), _jsx("li", { children: "Las claves API de tu dashboard de Stripe" }), _jsx("li", { children: "Para producci\u00F3n, configurar tambi\u00E9n el webhook secret" })] })] }), type: "info", showIcon: true, icon: _jsx(WarningOutlined, {}) }))] }) }));
};
export default StripeConfigForm;
