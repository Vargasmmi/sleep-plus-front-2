import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ThemedLayoutV2 } from "@refinedev/antd";
import { Outlet, Navigate } from "react-router-dom";
import { useGetIdentity, useResource } from "@refinedev/core";
import { Layout, Menu } from "antd";
import { Loading } from "./loading";
import { CustomHeader } from "./custom-header";
import { usePermissions } from "../hooks/usePermissions";
import { Link, useLocation } from "react-router-dom";
import { DashboardOutlined, UserOutlined, CreditCardOutlined, PhoneOutlined, DollarOutlined, TeamOutlined, ShopOutlined, RocketOutlined, TrophyOutlined, FileTextOutlined, WalletOutlined, ScanOutlined, BarChartOutlined, SettingOutlined, ToolOutlined, ShoppingCartOutlined, TagOutlined, ApiOutlined, HistoryOutlined, ApiOutlined as WebhookOutlined, AuditOutlined, CheckSquareOutlined, CrownOutlined, LockOutlined, } from "@ant-design/icons";
// Map of resource names to their icons
const RESOURCE_ICONS = {
    dashboard: _jsx(DashboardOutlined, {}),
    "call-center": _jsx(PhoneOutlined, {}),
    customers: _jsx(UserOutlined, {}),
    subscriptions: _jsx(CreditCardOutlined, {}),
    evaluations: _jsx(ScanOutlined, {}),
    calls: _jsx(PhoneOutlined, {}),
    sales: _jsx(DollarOutlined, {}),
    campaigns: _jsx(RocketOutlined, {}),
    employees: _jsx(TeamOutlined, {}),
    stores: _jsx(ShopOutlined, {}),
    commissions: _jsx(WalletOutlined, {}),
    achievements: _jsx(TrophyOutlined, {}),
    scripts: _jsx(FileTextOutlined, {}),
    reports: _jsx(BarChartOutlined, {}),
    administration: _jsx(SettingOutlined, {}),
    tools: _jsx(ToolOutlined, {}),
    shopify: _jsx(ShopOutlined, {}),
    system: _jsx(AuditOutlined, {}),
    dailyTasks: _jsx(CheckSquareOutlined, {}),
    leaderboard: _jsx(CrownOutlined, {}),
    systemSettings: _jsx(SettingOutlined, {}),
    permissions: _jsx(LockOutlined, {}),
    stripeManagement: _jsx(CreditCardOutlined, {}),
    shopifySettings: _jsx(ApiOutlined, {}),
    shopifyProducts: _jsx(ShoppingCartOutlined, {}),
    shopifyCustomers: _jsx(UserOutlined, {}),
    shopifyCoupons: _jsx(TagOutlined, {}),
    activityLogs: _jsx(HistoryOutlined, {}),
    webhooks: _jsx(WebhookOutlined, {}),
    webhookSettings: _jsx(SettingOutlined, {}),
};
export const AuthenticatedLayout = () => {
    const { data: identity, isLoading: identityLoading } = useGetIdentity();
    const { resources } = useResource();
    const { can, canAny, isLoading: permissionsLoading } = usePermissions();
    const location = useLocation();
    if (identityLoading) {
        return _jsx(Loading, {});
    }
    if (!identity) {
        return _jsx(Navigate, { to: "/login" });
    }
    // Build menu items based on permissions
    const buildMenuItems = () => {
        if (!resources || permissionsLoading)
            return [];
        const menuItems = [];
        const groupedResources = {};
        // First pass: organize resources
        resources.forEach((resource) => {
            const parent = resource.meta?.parent;
            // Check if user has permission to access this resource
            let hasAccess = false;
            if (resource.list || resource.show || resource.create) {
                // Check various permissions
                hasAccess = canAny(resource.name, ["list", "view", "show", "create"]);
            }
            else if (!parent) {
                // This is a parent/group resource, show it if any child is accessible
                hasAccess = true; // We'll check children later
            }
            if (hasAccess) {
                if (parent) {
                    if (!groupedResources[parent]) {
                        groupedResources[parent] = [];
                    }
                    groupedResources[parent].push(resource);
                }
                else {
                    // Top-level resource or group
                    if (!resource.list && !resource.show && !resource.create) {
                        // This is a group
                        groupedResources[resource.name] = groupedResources[resource.name] || [];
                    }
                    else {
                        // This is a regular resource
                        menuItems.push({
                            key: resource.name,
                            label: _jsx(Link, { to: resource.list || "/", children: resource.meta?.label || resource.name }),
                            icon: RESOURCE_ICONS[resource.name] || resource.meta?.icon,
                        });
                    }
                }
            }
        });
        // Second pass: build grouped items
        Object.keys(groupedResources).forEach((groupName) => {
            const children = groupedResources[groupName];
            // Only show group if it has accessible children
            if (children.length > 0) {
                const groupResource = resources.find(r => r.name === groupName);
                if (groupResource) {
                    menuItems.push({
                        key: groupName,
                        label: groupResource.meta?.label || groupName,
                        icon: RESOURCE_ICONS[groupName] || groupResource.meta?.icon,
                        children: children.map(child => ({
                            key: child.name,
                            label: _jsx(Link, { to: child.list || "/", children: child.meta?.label || child.name }),
                            icon: RESOURCE_ICONS[child.name] || child.meta?.icon,
                        })),
                    });
                }
            }
        });
        return menuItems;
    };
    const menuItems = buildMenuItems();
    // Custom Sider component
    const CustomSider = () => (_jsxs(Layout.Sider, { collapsible: true, theme: "light", style: {
            overflow: "auto",
            height: "100vh",
            position: "sticky",
            top: 0,
            left: 0,
        }, children: [_jsx("div", { style: { height: 64, display: "flex", alignItems: "center", justifyContent: "center" }, children: _jsx("h2", { style: { margin: 0 }, children: "Sleep Plus" }) }), _jsx(Menu, { mode: "inline", selectedKeys: [location.pathname.split("/")[1] || "dashboard"], items: menuItems, style: { borderRight: 0 } })] }));
    return (_jsx(ThemedLayoutV2, { initialSiderCollapsed: false, Header: CustomHeader, Sider: CustomSider, children: _jsx(Outlet, {}) }));
};
