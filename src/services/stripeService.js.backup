import axios from 'axios';
// Usar URL relativa en producción
const API_BASE_URL = import.meta.env.PROD ? '/api/stripe' : 'http://localhost:3001/api/stripe';
class StripeService {
    // Configuración
    async saveConfig(config) {
        try {
            const response = await axios.post(`${API_BASE_URL}/config`, config);
            return response.data;
        }
        catch (error) {
            console.error('Error guardando configuración de Stripe:', error);
            throw new Error(error.response?.data?.message || 'Error guardando configuración');
        }
    }
    async getConfig() {
        try {
            const response = await axios.get(`${API_BASE_URL}/config`);
            return response.data;
        }
        catch (error) {
            console.error('Error obteniendo configuración de Stripe:', error);
            throw new Error(error.response?.data?.message || 'Error obteniendo configuración');
        }
    }
    // Payment Links
    async createPaymentLink(data) {
        try {
            const response = await axios.post(`${API_BASE_URL}/payment-links`, data);
            return response.data;
        }
        catch (error) {
            console.error('Error creando Payment Link:', error);
            throw new Error(error.response?.data?.message || 'Error creando Payment Link');
        }
    }
    async getPaymentLinks() {
        try {
            const response = await axios.get(`${API_BASE_URL}/payment-links`);
            return response.data;
        }
        catch (error) {
            console.error('Error obteniendo Payment Links:', error);
            throw new Error(error.response?.data?.message || 'Error obteniendo Payment Links');
        }
    }
    async updatePaymentLink(id, data) {
        try {
            const response = await axios.put(`${API_BASE_URL}/payment-links/${id}`, data);
            return response.data;
        }
        catch (error) {
            console.error('Error actualizando Payment Link:', error);
            throw new Error(error.response?.data?.message || 'Error actualizando Payment Link');
        }
    }
    async deletePaymentLink(id) {
        try {
            const response = await axios.delete(`${API_BASE_URL}/payment-links/${id}`);
            return response.data;
        }
        catch (error) {
            console.error('Error eliminando Payment Link:', error);
            throw new Error(error.response?.data?.message || 'Error eliminando Payment Link');
        }
    }
    // Suscripciones
    async createSubscription(data) {
        try {
            const response = await axios.post(`${API_BASE_URL}/subscriptions`, data);
            return response.data;
        }
        catch (error) {
            console.error('Error creando suscripción:', error);
            throw new Error(error.response?.data?.message || 'Error creando suscripción');
        }
    }
    async getSubscriptions() {
        try {
            const response = await axios.get(`${API_BASE_URL}/subscriptions`);
            return response.data;
        }
        catch (error) {
            console.error('Error obteniendo suscripciones:', error);
            throw new Error(error.response?.data?.message || 'Error obteniendo suscripciones');
        }
    }
    async cancelSubscription(id) {
        try {
            const response = await axios.post(`${API_BASE_URL}/subscriptions/${id}/cancel`);
            return response.data;
        }
        catch (error) {
            console.error('Error cancelando suscripción:', error);
            throw new Error(error.response?.data?.message || 'Error cancelando suscripción');
        }
    }
    // Webhooks
    async getWebhooks() {
        try {
            const response = await axios.get(`${API_BASE_URL}/webhooks`);
            return response.data;
        }
        catch (error) {
            console.error('Error obteniendo webhooks:', error);
            throw new Error(error.response?.data?.message || 'Error obteniendo webhooks');
        }
    }
    async retryWebhook(id) {
        try {
            const response = await axios.post(`${API_BASE_URL}/webhooks/${id}/retry`);
            return response.data;
        }
        catch (error) {
            console.error('Error reintentando webhook:', error);
            throw new Error(error.response?.data?.message || 'Error reintentando webhook');
        }
    }
    // Estadísticas
    async getStats() {
        try {
            const response = await axios.get(`${API_BASE_URL}/stats`);
            return response.data;
        }
        catch (error) {
            console.error('Error obteniendo estadísticas:', error);
            throw new Error(error.response?.data?.message || 'Error obteniendo estadísticas');
        }
    }
    // Utilidades
    formatCurrency(amount, currency = 'USD') {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: currency.toUpperCase(),
        }).format(amount);
    }
    formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('es-ES', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }
    getStatusColor(status) {
        const colors = {
            active: 'green',
            completed: 'blue',
            canceled: 'red',
            draft: 'orange',
            expired: 'red',
            inactive: 'gray',
            past_due: 'red',
            trialing: 'blue',
            unpaid: 'red'
        };
        return colors[status] || 'gray';
    }
    getStatusText(status) {
        const texts = {
            active: 'Activo',
            completed: 'Completado',
            canceled: 'Cancelado',
            draft: 'Borrador',
            expired: 'Expirado',
            inactive: 'Inactivo',
            past_due: 'Vencido',
            trialing: 'En prueba',
            unpaid: 'Sin pagar'
        };
        return texts[status] || status;
    }
}
export default new StripeService();
